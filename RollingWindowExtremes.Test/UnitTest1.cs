using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using Xunit;

namespace RollingWindowExtremes.Test
{
    public class UnitTest1
    {

        private ImmutableList<int> testData = new List<int>
        {
            817, 191, 612, 538, 390, 119, 425, 123, 409, 792, 866, 459, 272, 537, 870,
            353, 645, 813, 718, 352, 614, 722, 603, 003, 578, 446, 564, 873, 818, 299,
            105, 711, 131, 927, 776, 574, 336, 674, 827, 882, 988, 484, 773, 455, 436,
            160, 219, 457, 725, 665, 822, 631, 009, 434, 017, 906, 146, 931, 993, 997,
            905, 087, 151, 611, 166, 632, 913, 257, 613, 237, 529, 857, 839, 195, 591,
            364, 192, 154, 211, 271, 716, 829, 846, 644, 926, 646, 815, 125, 758, 036,
            108, 534, 163, 311, 945, 437, 155, 365, 076, 766, 498, 735, 110, 142, 834,
            703, 020, 033, 952, 891, 721, 445, 120, 453, 113, 895, 643, 069, 465, 713,
            726, 053, 261, 514, 129, 396, 753, 962, 404, 201, 526, 218, 532, 738, 693,
            216, 178, 884, 543, 769, 990, 546, 319, 701, 667, 175, 851, 248, 670, 464,
            395, 363, 312, 394, 729, 740, 497, 649, 743, 049, 392, 903, 696, 820, 845,
            263, 362, 933, 114, 887, 768, 413, 056, 541, 683, 327, 814, 323, 801, 235,
            128, 310, 823, 821, 524, 093, 288, 179, 157, 449, 256, 778, 371, 411, 058,
            358, 780, 808, 974, 361, 472, 219, 341, 738, 874, 659, 813, 169, 296, 284,
            202, 556, 611, 566, 848, 389, 185, 639, 635, 370, 708, 488, 641, 263, 871,
            156, 904, 765, 254, 584, 027, 545, 153, 918, 058, 785, 984, 473, 616, 805,
            709, 358, 600, 369, 547, 237, 841, 971, 388, 273, 255, 685, 585, 261, 844,
            136, 441, 622, 223, 579, 380, 143, 248, 779, 555, 583, 979, 667, 106, 216,
            594, 129, 213, 121, 913, 788, 259, 974, 563, 862, 661, 432, 568, 697, 424,
            581, 166, 323, 790, 516, 353, 648, 036, 054, 824, 427, 469, 604, 182, 118
        }.ToImmutableList();

        [Fact]
        public void Test()
        {
            for (var size = 1; size < 300; ++size)
            {
                var window = new RollingWindowExtremes<int>(size);
                for (var i = 0; i < testData.Count; ++i)
                {
                    window.AddItem(testData[i]);
                    var min = 1000;
                    var max = 0;
                    for (var j = i - size + 1; j <= i; ++j)
                    {
                        if (j < 0)
                            j = 0;

                        if (testData[j] > max)
                            max = testData[j];

                        if (testData[j] < min)
                            min = testData[j];
                    }

                    Assert.Equal(min, window.GetCurrentLow());
                    Assert.Equal(max, window.GetCurrentHigh());
                }
            }
        }
    }
}
